nor
nor <-split(x = norall,norall$X.2)$Normalized
runs<- split(nor,nor$X.1)
dotplot(runs)
plot(runs)
plot(nor$X.1,y=nor$Amylase.Pre)
plot(nor$X.1,y=nor[,3-11]
)
plot(nor$X.1,y=nor[,3])
plot(nor$X.1,y=nor[,4])
nor[,4]
plot(nor$X.1,y=nor[,4])
nor[,1]
nor[,3]
nor[,5]
plot(nor$X.1,y=nor[,5])
plot(nor$X.1,y=nor[,5-10])
plot(nor$X.1,y=nor[,6])
dotplot(y=nor[,6])
?dotplot
dotchart(y=nor[,6])
dotchart(nor$X.1,y=nor[,6])
dotchart(x=nor[,6])
dotchart(x=nor[,6-10])
dotchart(x=nor[,6:10])
nor[,6:10]
head(nor)
length(nor)
head(nor[,5:19])
df = nor[,5:19]
ggplot(data=df, aes(x=Location, y=value, color=Treatment)) +
geom_point(position=position_dodge(width=0.3))
library(ggplot2)
df = nor[,5:19]
version
install.packages(c("boot", "gtable", "nlme", "rmarkdown", "scales"))
ggplot(data=df, aes(x=Location, y=value, color=Treatment)) +
geom_point(position=position_dodge(width=0.3))
df
ggplot(data=df, aes(x=names(df), y=df)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=df, aes()) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=nor,aes(x= nor$X.1,y=nor[,5]) +
geom_point(position=position_dodge(width=0.3))
)
ggplot(data=nor,aes(x= nor$X.1,y=nor[,5]) +
geom_point()
ggplot(data=nor,aes(x= nor$X.1,y=nor[,5])) +
geom_point()
ggplot(data=nor,aes(x= nor$X.1,y=nor[,5])) +
geom_point()
install.packages("reshape2")
pnorm(295,mean=298,sd = 3)
pnorm(295,mean=298,sd = 3/sqrt(6))
setwd("~/Dropbox/study/2016 Spring/MATH6690/HW6")
T8.4 <- read.delim("~/Dropbox/study/2016 Spring/MATH6690/HW6/T8-4.DAT", header=FALSE)
View(T8.4)
X = T8.4 <- read.delim("T8-4.DAT", header=FALSE)
colnames(X) = c("JPM", "Citi", "WellsF", "Shell", "Exxon")
eig = eigen(R);eig
S = cov(X);S
R = cor(X)
eig = eigen(R);eig
lambda = eig$values
Gamma = eig$vectors  # Gamma = fit1$loadings will do this too.
sqrt(lambda)
diag(sqrt(lambda))
L = Gamma%*%diag(sqrt(lambda))
L
Gamma
lambda
L
eigen(S)
eigen(R)
cumsum(eigen(S)$values)
cumsum(eigen(S)$values)/sum(eigen(S)$values)
cumsum(eigen(R)$values)/sum(eigen(R)$values)
cumsum(eigen(R)$values)
(eigen(R)$values)/sum(eigen(R)$values)
princomp(X)
?princomp
princomp(X,cor = F)
X
R = cor(X);R
eig = eigen(R);eig
lambda = eig$values
Gamma = eig$vectors
sqrt(lambda)
sqrt(lambda)/sum(sqrt(lambda))
R
eigen(R)
L
Gamma
fit1
fit1 = princomp(X)
fit1$call
fit1 = princomp(X)
fit1$center
fit1
fit1$loadings
fit1$n.obs
summary(fit1)
sum(lambda)
?eigen
colmeans(X)
colmean(X)
colMeans(X)
kable(colMeans(X),digits = 3)
library(knitr)
kable(colMeans(X),digits = 3)
kable(colMeans(X),digits = 3))
kable(colMeans(X))
colMeans(X)
a = colMeans(X)
eig$vectors
sum(lamda[1:3])
sum(lambda[1:3])
eig$values
eig$values/5
R
S
eig$values
eigen{S}
eigen{S}
eigen(S)
eigen(S)
fit1
summary(fit1)
eig$values/sum(eig$values);cumsum(eig$values)/sum(eig$values)
eig = eigen(S)
eig$values/sum(eig$values);cumsum(eig$values)/sum(eig$values)
T1.5 <- read.table("~/Dropbox/study/2016 Spring/MATH6690/HW6/T1-5.dat", quote="\"", comment.char="")
View(T1.5)
T1.5 <- read.table("T1-5.dat", quote="\"", comment.char="")
colnames(T1.5) <- c("Wind","Solar","CO","NO","NO2","O3","HC")
?princomp
princomp(X,cor = T)
summary(princomp(x = X, cor = T))
summary(princomp(x = X, cor = F))
summary(princomp(T1.5,cor = T));
summary(princomp(T1.5,cor = T));
summary(princomp(T1.5,cor = F))
kable(head(T1.5))
dim(T1.5)
kable(summary(princomp(T1.5,cor = T));
kable(summary(princomp(T1.5,cor = T))
kable(summary(princomp(T1.5,cor = T)))
kable(summary(princomp(T1.5,cor = T)))
cor(T1.5)
kable(cor(T1.5),digits = 3)
install.packages(c("boot", "deSolve", "evaluate", "formatR", "htmltools", "Matrix", "mgcv", "nlme", "nnet", "RCurl"))
version
install.packages("Rcpp")
library(dplyr)
summarise(mtcars, mean(disp))
library(hflights)
a = filter(hflights,UniqueCarrier == "AA")
summarise(a,mean(ArrDelay))
names(a)
names(mtcar)
names(mtcars)
summarise(filter(hflights,UniqueCarrier == "AA"),mean(ArrDelay))
a$ArrDelay
summarise(filter(hflights,UniqueCarrier == "AA"),mean(ArrDelay,na.rm = T))
install.packages(c("cluster", "curl", "devtools", "Matrix", "nlme", "survival"))
version
date
q()
gc_MATH2600009201610_fullgc_2016.05.01.00.38.57 <- read.table("~/Dropbox/study/2016 Spring/MATH2600/Gradebook/gc_MATH2600009201610_fullgc_2016-05-01-00-38-57.csv", header=TRUE, quote="\"")
View(gc_MATH2600009201610_fullgc_2016.05.01.00.38.57)
test <- read.csv("~/Documents/test.csv")
View(test)
test[5]
test[,5]
test[,4]
test[,6]
total = test[6]
install.packages(c("evaluate", "rmarkdown"))
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
---
title: "General Chemistry Project Analytical Report"
author: "XiaosongZhang"
date: "February 2, 2016"
output:
pdf_document:
fig_caption: yes
fig_height: 4
fig_width: 5
highlight: pygments
---
```{r,echo =FALSE}
library(knitr)
library(ggplot2);library(ggthemes)
CHEM.1230.Fall.2015.Students <- read.csv("~/Dropbox/Rcode-server/Consulting/CHEM 1230 Fall 2015 Students.csv")
attach(CHEM.1230.Fall.2015.Students)
WithAleks <-subset(CHEM.1230.Fall.2015.Students,CHEM.1230.Fall.2015.Students$ALEKS_CHEM_TEST>0)
```
#General Chemistry Enrollment Placement(ALEKS)
##Introduction
Universities who are responsible for their students and eager to provide opportunities for successful academic experiences often require their students to take a placement test before be able to register their course. Since students come to the University from an entirely different background, thus the grading standards for their high-school courses are vary in a tremendous scale. We want to put students in the optimal level of courses that they could have decent chance to be a success, which can decrease the possibility they being suffered both economically, mentally from fail a course they don't stand too much chance to pass.
To achieve this goal, we use placement tests score as a reference to show their ability in certain academic areas.
In this project, we want to find out how to use the placement test score(using ALEKS system) as a reference to provide an optimized suggestion for the enrollment of general chemistry course that could let as many students enter the course early as possible while maintaining an acceptable success rate.
##The goal of this project
In the dataset of CHEM1230, we do have a lot of independent variables that might be used to build a model for prediction, and one dependent variable that we cared about which is the final grade of our CHEM1230 student.
We do have different placement test forms before, such as standard placement test on paper from American Chemistry Association, but since the Chemistry department moved to ALEKS(Assessment and Learning in Knowledge Spaces) system since Fall 2014 thus we believe the prediction should be based on ALEKS score. Other variables in our dataset such as high school GPA could be good predictors only under the assumption that the standard for all student is uniform which is not the case in real world.
Since it is currently impossible to design an experiment to assess the strict causal relationship between the independent variables and the dependent variable(The successfulness of this course), thus we can only perform a retrospective observational study on this dataset.
According to Dr. Jorgensenâ€™s request, we want to find a simple method that can quickly decide whether to allow a student register General Chemistry or not. The method does not need to be very accurate that can give the prediction of their final letter grade; they only want to know the possibility of a student be able to succeed in this course. In General Chemistry, Dr. Jorgensen mentioned that a final grade greater or equal to C- could be considered as a success, while final grade lower than C- will be considered technically as a fail since the student is not able to build up a firm foundation to continue for further more advanced chemistry courses.
##Understanding the data
The data of general chemistry course is a complex dataset that has 4040 observations of 73 different variables.
```{r}
dim(CHEM.1230.Fall.2015.Students)
names(CHEM.1230.Fall.2015.Students)
```
Among these 4040 observations there are only `r length(WithAleks$TERM)` students took ALEKS score.
According to Dr. Jorgensen, the Chemistry Department starting to move the placement test from paper base ASC exam to ALEKS system since fall 2014, but the major group of students that took ALEKS and went over CHEM1230(General Chemistry I) was started in FALL 2015(coded as 201540).
```{r}
table(WithAleks$TERM)
```
Since the Spring 2016 semester(201610) just begin, and those 110 students who are taking CHEM1230 this semester won't have any grade available. This procedure will cut the useful sample size further down to 559.
ALEKS scores were recorded as two different variables in our dataset; they are [72]"ALEKS_CHEM_TEST" and [73]"ALEKS_CHEM_HIGH".
```{r,fig.cap="Histogram of Initial ALEKS score of FALL 2015 "}
Fall15 <- split(WithAleks,WithAleks$TERM)
p <-ggplot(Fall15$`201540`,aes(Fall15$`201540`$ALEKS_CHEM_TEST))
p + geom_histogram(bins = 15)+ theme_economist()+ labs(title ="Initial ALEKS score of FALL 2015" )+
xlab("Initial ALEKS Score") +ylab("Counts")
```
```{r,fig.cap="Histogram of Initial ALEKS score of FALL 2015 "}
Fall15 <- split(WithAleks,WithAleks$TERM)
p <-ggplot(Fall15$`201540`,aes(Fall15$`201540`$ALEKS_CHEM_HIGH))
p + geom_histogram(bins = 15)+ theme_economist()+
labs(title ="ALEKS High score of FALL 2015" )+xlab("Highest ALEKS Score") +ylab("Counts")
```
Unlike the retired ACS paper based placement test, the newly deployed ALEKS system is not a "Deal or no Deal" process. The current policy of CHEM1230  allows the students to try unlimited times before they can reach the minimum requirement score. The time frame for the ALEKS online learning/testing is relatively long(2 months), which could mean that even for student with relatively lower learning speed could also achieve the passing line overtime.
###Rearrange the data
Unlike the retired ACS paper based placement test, the newly deployed ALEKS system is not a "Deal or no Deal" process. The current policy of CHEM1230  allows the students to try unlimited times before they can reach the minimum requirement score. The time frame for the ALEKS online learning/testing is relatively long(2 months), Which could mean some students who pass the ALEKS test learning the material at a relatively inferior efficiency. Then these students might not be able to get used to the extensive workload in the CHEM1230. After carefully examine both histograms for ALEKS initial score and ALEKS high score, we believe that the initial score should be more reliable as a predictor for the students' final class result.
In the original data, the final grade of Chemistry 1230 has been stored as letter grades from A to F. To serve the goal to find out if a student can pass or not pass the course, we would like to use a categorical variable with two levels to represent the result. According to our client Dr. Jourgensen, a letter grade C- or higher could be considered as a success for CHEM 1230 while D or lower will be considered as a failure. Thus, we can create a new variable "Success." based on the letter grade.
```{r}
```
Fall15$`201540`$GRADE
kable(table(Fall15$`201540`$GRADE))
kable(table(Fall15$`201540`$GRADE))
table(Fall15$`201540`$GRADE)
levels(Fall15$`201540`$GRADE)
library(dplyr)
names(CHEM.1230.Fall.2015.Students)
levels(Fall15$`201540`$GRADE)
factor(Fall15$`201540`$GRADE)
Success<- Fall15$`201540`$GRADE
levels(Success)<- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0)
levels(Success)<- c(1,1,1,1,1,1,1,1,0,0,0,0,0)
levels(Success)<- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0)
levels(Success)
Success<- factor(Fall15$`201540`$GRADE)
levels(Success)
levels(Success)<- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0)
Success
table(Success)
fit <- glm(Success~Fall15$`201540`$ALEKS_CHEM_TEST)
fit <- glm(as.factor(Success)~Fall15$`201540`$ALEKS_CHEM_TEST)
fit <- glm(Success~Fall15$`201540`$ALEKS_CHEM_TEST)
Fall15$`201540`$ALEKS_CHEM_TEST
Success
fit <- glm(Success~Fall15$`201540`$ALEKS_CHEM_TEST)
x = Fall15$`201540`$ALEKS_CHEM_TEST
fit <- glm(Success~x)
x
Success
fit <- glm(Success~x)
fit <- lm(Success~x)
fit <- glm(Success~x)
fit <- glm(~Success + x)
xtabs <- glm(~Success + x)
xtabs(~Success + x)
kable(xtabs(~Success + x))
table = xtabs(~Success + x)
?xtabs
# Variables related to your last day of recordings
li <- 15
fb <- 9
# Code the control-flow construct
if (li>=15 & fb>=15) {
sms <- 2 * (li + fb)
} else (li<10 & fb<10) {
sms <- 0.5 * (li + fb)
} else {
sms <- li+fb
}
li <- 15
fb <- 9
# Code the control-flow construct
if (li>=15 & fb>=15) {
sms <- 2 * (li + fb)
} else (li<10 & fb<10) {
sms <- 0.5 * (li + fb)
} else {
sms <- li+fb
}
10%8
10%%8
install.packages(c("BH", "curl", "DBI", "deSolve", "devtools", "digest", "dplyr", "fields", "fitdistrplus", "foreign", "formatR", "GGally", "ggthemes", "git2r", "highr", "httr", "jsonlite", "knitr", "lattice", "lazyeval", "maps", "Matrix", "mgcv", "mime", "nlme", "openssl", "partykit", "plyr", "R6", "Rcpp", "rmarkdown", "rpart.plot", "rstudioapi", "scatterplot3d", "shiny", "spam", "stringi", "stringr", "survival", "withr"))
y
y
install.packages("partykit")
install.packages("instaR")
install.packages("installr")
version
install.packages("installr")
if (!require('devtools')) install.packages('devtools'); # make sure you have Rtools installed first! if not, then run:
#install.packages('installr')
#install.Rtools()
devtools::install_github('talgalili/installr')
library(installr)
install.packages(c("foreign", "lattice", "Matrix", "mgcv", "survival"))
library(installr)
install.R()
installr()
install.packages("stringr")
installr()
is.windows()
version
##STATS250 KEY FACTOR ANALYSIS
#Please answer the following question:  Other than GPAO, which variable(s) best predict the variable
# for GRD_PTS_PER_UNIT for the course STATS 250 (SUBJECT="STATS" and CATALOG_NBR=250)? In other words,
#what is the best predictor of a student's performance in STATS 250 other than the student's own GPA?
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir('PLA-MOOC')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir('PLA-MOOC')
sourceDir('PLA-MOOC')
setwd("~/git/aim-analytics")
sourceDir('PLA-MOOC')
student.course <- read.csv("~/GitHub/aim-analytics/PLA-MOOC/student.course.csv")
student.course <- read.csv("PLA-MOOC/student.course.csv")
student.record <- read.csv("PLA-MOOC/student.record.csv")
require("dplyr")
install.packages("dplyr")
install.packages("gplots")
install.packages("treemap")
install.packages("optmatch")
sr <- read.csv("~/aim-analytics/PLA-MOOC/student.record.csv")
sr <- read.csv("PLA-MOOC/student.record.csv")
sc <- read.csv("PLA-MOOC/student.course.csv")
source('PLA-MOOC/grade.penalty.module.R')
out <- grade.penalty(sr,sc,'PHYSICS',135,GROUP='GENDER',REGRESSION=TRUE,MATCHING=TRUE,PDF=FALSE)
out <- grade.penalty(sr,sc,'STATS',250,GROUP='GENDER',REGRESSION=TRUE,MATCHING=TRUE,PDF=FALSE)
setwd("~/Dropbox/study/2016 Spring/MATH6690/Xiaosong Jia")
library(knitr)
library(pander)
mat<-student.mat <- read.csv("student-mat.csv")
m = names(mat)
pander(m)
attach(mat)
View(mat)
set.seed(1024)
grades <- read.table("http://www.andrew.cmu.edu/user/achoulde/94842/data/student-mat.csv", sep = ";", header = TRUE)
grades <- grades[,-c(31, 32)]  # Remove mid-year grades (columns 31 and 32)
# Set aside 95 of the students for a test set
test.indexes <- sample(1:nrow(grades), 95)
train.indexes <- setdiff(1:nrow(grades), test.indexes)
grades.train <- grades[train.indexes, ]
grades.test <- grades[test.indexes, ]
grades.lm <- lm(G3 ~ ., data = grades.train)
mean.grade <- mean(grades.train$G3)
# Function that calculates MSE, RMSE and MAE of a predictor
# Inputs:
#  fitted - fitted or predicted values
#  true - vector of observed outcomes
calcErrorMetrics <- function(fitted, true) {
mse <- mean((fitted - true)^2)
rmse <- sqrt(mse)
mae <- mean(abs(fitted - true))
return(c(mse = mse, rmse = rmse, mae = mae))
}
metrics.lm <- calcErrorMetrics(grades.lm$fitted, grades.train$G3)
metrics.ave <- calcErrorMetrics(mean.grade, grades.train$G3)
random.data <- data.frame(G3 = grades.train$G3, matrix(rnorm(200 * nrow(grades.train)), nrow = nrow(grades.train)))
random.lm <- lm(G3 ~ ., data = random.data)
metrics.random <- calcErrorMetrics(random.lm$fitted, grades.train$G3)
# Generate another batch of random numbers for the test data
random.test.data <- data.frame(matrix(rnorm(200 * nrow(grades.test)), nrow = nrow(grades.test)))
metrics.random.test <- calcErrorMetrics(predict(random.lm, random.test.data), grades.test$G3)
metrics.ave.test <- calcErrorMetrics(mean.grade, grades.test$G3)
grades.predicted <- predict(grades.lm, grades.test)
metrics.lm.test <- calcErrorMetrics(grades.predicted, grades.test$G3)
```
summary(grades.lm)
View(grades)
names(sc)
names(S.A)
Course <-tbl_df(student.course)
Record <-tbl_df(student.record)
S.A = STATS250.Aggregate <- inner_join(STATS250,Record,by = 'ANONID')
require("dplyr")
Course <-tbl_df(student.course)
Record <-tbl_df(student.record)
STATS250 = filter(Course,SUBJECT =='STATS' & CATALOG_NBR == '250')
S.A = STATS250.Aggregate <- inner_join(STATS250,Record,by = 'ANONID')
names(S.A)
summary(S.A)
attach(S.A)
fit.SatVsAct <- lm(LAST_SATI_MATH_SCORE~LAST_ACT_MATH_SCORE)
plot(fit.SatVsAct)
summary(fit.SatVsAct)
summary(S.A$LAST_ACT_MATH_SCORE)
summary(LAST_SATI_MATH_SCORE)
plot(fit.SatVsAct)
names(SAc)
names(SA)
names(S.A)
fit.SatVsAct <- lm(LAST_SATI_MATH_SCORE~LAST_ACT_MATH_SCORE+HSGPA+SEX)
plot(fit.SatVsAct)
summary(fit.SatVsAct)
plot(LAST_ACT_MATH_SCORE)
hist(LAST_ACT_MATH_SCORE)
hist(LAST_SATI_MATH_SCORE)
hist(LAST_SATI_MATH_SCORE)
hist(LAST_ACT_MATH_SCORE)
hist(LAST_SATI_MATH_SCORE)
summary(S.A$LAST_ACT_MATH_SCORE)
summary(LAST_SATI_MATH_SCORE)
plot(AST_ACT_MATH_SCORE,LAST_SATI_MATH_SCORE)
attach(S.A)
plot(AST_ACT_MATH_SCORE,LAST_SATI_MATH_SCORE)
plot(LAST_ACT_MATH_SCORE,LAST_SATI_MATH_SCORE)
plot(LAST_ACT_MATH_SCORE,x =LAST_SATI_MATH_SCORE)
qplot(LAST_ACT_MATH_SCORE,x =LAST_SATI_MATH_SCORE)
require(ggplot2)
qplot(LAST_ACT_MATH_SCORE,x =LAST_SATI_MATH_SCORE)
hist(student.record$HSGPA)
levels(Course$SUBJECT)
qplot(HSGPA)
glimpse(Course)
glimpse(Course)
glimpse(Record)
glimpse(S.A)
summary(SEX)
summary(S.A)
source('~/git/aim-analytics/STATS250 KEY FACTOR ANALYSIS.R')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
#Source all functions uder PLA-MOOC into R-Environment for future use.
sourceDir('PLA-MOOC')
#loading data into Environment
student.course <- read.csv("PLA-MOOC/student.course.csv")
student.course <- read.csv("/PLA-MOOC/student.course.csv")
setwd("~/git/aim-analytics")
student.course <- read.csv("PLA-MOOC/student.course.csv")
summary(LAST_ACT_MATH_SCORE)
summary(LAST_SATI_MATH_SCORE)
summary(HSGPA)
hist(HSGPA)
Course <-tbl_df(student.course)
Record <-tbl_df(student.record)
#getting to know the dataset's big picture
glimpse(Course)
glimpse(Record)
names(Course)
names(Record)
levels(Course$SUBJECT)
#select only the data required for look into STATS 250
STATS250 = filter(Course,SUBJECT =='STATS' & CATALOG_NBR == '250')
#aggregate the 'Record' and 'Course' table by the Anonymous ID
S.A = STATS250.Aggregate <- inner_join(STATS250,Record,by = 'ANONID')
attach(S.A)
#Check
glimpse(S.A)
summary(S.A)
summary(SEX)
summary(LAST_ACT_MATH_SCORE)
summary(LAST_SATI_MATH_SCORE)
summary(HSGPA)
hist(HSGPA)
hist(LAST_ACT_MATH_SCORE)
hist(HSGPA)
summary(student.record$HSGPA)
summary(student.record)
summary(student.course)
filter(student.record, HSGPA>4.0)
filter(student.record, HSGPA<4.0)
filter(student.record, HSGPA>4.0)
filter(student.record, HSGPA< 1)
filter(student.record, HSGPA< 1 & (LAST_ACT_MATH_SCORE = NA)
filter(student.record, HSGPA< 1 & (LAST_ACT_MATH_SCORE = NA))
filter(student.record, HSGPA< 1 & (LAST_ACT_MATH_SCORE = NA))
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE = NA)
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE == NA)
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE == NULL )
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE > 0 )
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE < 20 )
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE >32 )
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE >34 )
filter(student.record, HSGPA< 1 & LAST_ACT_MATH_SCORE >35 )
filter(student.record, HSGPA>4.0)
